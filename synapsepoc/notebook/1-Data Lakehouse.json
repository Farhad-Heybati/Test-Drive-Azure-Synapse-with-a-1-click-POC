{
	"name": "1-Data Lakehouse",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "ws1sparkpool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "112g",
			"driverCores": 16,
			"executorMemory": "112g",
			"executorCores": 16,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "621c13fe-dd6c-4ec7-9114-cd2821067f58"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/281e4630-88bb-4464-b35f-af54cdd4252d/resourceGroups/Synapse-1-click-RG/providers/Microsoft.Synapse/workspaces/eliszdel7xj7vkkkkpocws1/bigDataPools/ws1sparkpool1",
				"name": "ws1sparkpool1",
				"type": "Spark",
				"endpoint": "https://eliszdel7xj7vkkkkpocws1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/ws1sparkpool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 5,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_trip = spark.read.load('abfss://public@eliszdel7xj7vkkkkpoc.dfs.core.windows.net/trip-data.csv', \r\n",
					"format='csv',\r\n",
					"inferSchema='True',\r\n",
					"header=True\r\n",
					")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "python"
					}
				},
				"source": [
					"%%pyspark\r\n",
					"df_fares = spark.read.load('abfss://public@eliszdel7xj7vkkkkpoc.dfs.core.windows.net/fares-data.csv', \r\n",
					"format='csv',\r\n",
					"inferSchema='True',\r\n",
					"header=True\r\n",
					")"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd\r\n",
					"\r\n",
					"df_fares_pandas = df_fares.toPandas()\r\n",
					"df_trip_pandas = df_trip.toPandas()\r\n",
					"merge_taxis_df = pd.merge(df_trip_pandas, df_fares_pandas, how=\"inner\", on=[\"vendor_id\", \"medallion\", \"hack_license\", \"pickup_datetime\"])\r\n",
					"#merge_taxis_df.dropna(inplace=True, axis=0)\r\n",
					"merge_taxis_df = merge_taxis_df[merge_taxis_df['store_and_fwd_flag'] != 'null']"
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					}
				},
				"source": [
					"%%sql\r\n",
					"-- Create Delta Lake table, define schema and location\r\n",
					"CREATE TABLE merge_taxi_delta (\r\n",
					"\tmedallion nvarchar(4000),\r\n",
					"\t[hack_license] nvarchar(4000),\r\n",
					"\t[vendor_id] nvarchar(4000),\r\n",
					"\t[pickup_datetime] datetime2(7),\r\n",
					"\t[fare_amount] float,\r\n",
					"\t[tip_amount] float,\r\n",
					"\t[tolls_amount] float,\r\n",
					"\t[total_amount] float,\r\n",
					"\t[dropoff_datetime] datetime2(7),\r\n",
					"\t[passenger_count] bigint,\r\n",
					"\t[trip_time_in_secs] bigint,\r\n",
					"\t[trip_distance] float,\r\n",
					"\t[pickup_longitude] float,\r\n",
					"\tpickup_latitude float,\r\n",
					"\tdropoff_longitude float,\r\n",
					"\tdropoff_latitude float\r\n",
					")\r\n",
					"USING DELTA\r\n",
					"-- specify data lake folder location\r\n",
					"LOCATION '/taxis/clean_data/' "
				],
				"execution_count": null
			}
		]
	}
}