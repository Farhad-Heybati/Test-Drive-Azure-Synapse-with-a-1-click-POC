{
	"name": "Join trop to Fares",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "fairs_Parquet",
						"type": "DatasetReference"
					},
					"name": "Fares"
				},
				{
					"dataset": {
						"referenceName": "Taxi_trip_parquet",
						"type": "DatasetReference"
					},
					"name": "trip"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AdfJoinedData",
						"type": "DatasetReference"
					},
					"name": "Adls"
				}
			],
			"transformations": [
				{
					"name": "joinTripFares"
				},
				{
					"name": "CleanData"
				}
			],
			"scriptLines": [
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          rate_code as string,",
				"          store_and_fwd_flag as string,",
				"          pickup_datetime as string,",
				"          dropoff_datetime as string,",
				"          passenger_count as string,",
				"          trip_time_in_secs as string,",
				"          trip_distance as string,",
				"          pickup_longitude as string,",
				"          pickup_latitude as string,",
				"          dropoff_longitude as string,",
				"          dropoff_latitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> Fares",
				"source(output(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          rate_code as string,",
				"          store_and_fwd_flag as string,",
				"          pickup_datetime as string,",
				"          dropoff_datetime as string,",
				"          passenger_count as string,",
				"          trip_time_in_secs as string,",
				"          trip_distance as string,",
				"          pickup_longitude as string,",
				"          pickup_latitude as string,",
				"          dropoff_longitude as string,",
				"          dropoff_latitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> trip",
				"Fares, trip join(Fares@vendor_id == trip@vendor_id",
				"     && Fares@medallion == trip@medallion",
				"     && Fares@hack_license == trip@hack_license,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinTripFares",
				"joinTripFares filter(toInteger(trip@trip_distance) > 0 && toInteger(trip@passenger_count) > 0 && Fares@store_and_fwd_flag != 'NULL') ~> CleanData",
				"CleanData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          medallion as string,",
				"          hack_license as string,",
				"          vendor_id as string,",
				"          pickup_datetime as string,",
				"          payment_type as string,",
				"          fare_amount as string,",
				"          surcharge as string,",
				"          mta_tax as string,",
				"          tip_amount as string,",
				"          tolls_amount as string,",
				"          total_amount as string",
				"     ),",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Adls"
			]
		}
	}
}